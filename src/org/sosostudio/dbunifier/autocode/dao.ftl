<#assign hasPrimaryKey = false />
<#list table.columnList as column>
	<#if column.isPrimaryKey>
		<#assign hasPrimaryKey = true>
		<#break>
	</#if>
</#list>
package ${package};

import java.util.ArrayList;
import java.util.List;

import org.sosostudio.dbunifier.DbUnifier;
import org.sosostudio.dbunifier.Row;
import org.sosostudio.dbunifier.RowSet;
import org.sosostudio.dbunifier.autocode.PaginationArrayList;
import org.sosostudio.dbunifier.oom.ConditionClause;
import org.sosostudio.dbunifier.oom.DeleteSql;
import org.sosostudio.dbunifier.oom.ExtraClause;
import org.sosostudio.dbunifier.oom.InsertKeyValueClause;
import org.sosostudio.dbunifier.oom.InsertSql;
import org.sosostudio.dbunifier.oom.LogicalOp;
import org.sosostudio.dbunifier.oom.OrderByClause;
import org.sosostudio.dbunifier.oom.RelationOp;
import org.sosostudio.dbunifier.oom.SelectSql;
import org.sosostudio.dbunifier.oom.UpdateKeyValueClause;
import org.sosostudio.dbunifier.oom.UpdateSql;

/**
 * ${table.name}
 * @author generated by db-unifier autocode
 */
public class ${table.definationName}Dao {

    private DbUnifier unifier;

    public ${table.definationName}Dao() {
    	unifier = new DbUnifier();
    }

    public ${table.definationName}Dao(DbUnifier unifier) {
        this.unifier = unifier;
    }

    public int add${table.definationName}(${table.definationName} ${table.variableName}) {
    	InsertSql insertSql = new InsertSql().setTableName("${table.name}")
					.setInsertKeyValueClause(
							new InsertKeyValueClause()
		<#list table.columnList as column>
			.add${column.type.getName()}Clause("${column.name}", ${table.variableName}.get${column.definationName}())
        </#list>
        );
        return unifier.executeInsertSql(insertSql);
    }

	<#if hasPrimaryKey>
    public int update${table.definationName}(${table.definationName} ${table.variableName}) {
    	UpdateSql updateSql = new UpdateSql()
					.setTableName("${table.name}")
					.setUpdateKeyValueClause(
							new UpdateKeyValueClause()
		<#list table.columnList as column>
				.add${column.type.getName()}Clause("${column.name}", ${table.variableName}.get${column.definationName}())
        </#list>
					).setConditionClause(
							new ConditionClause(LogicalOp.AND)
		<#list table.columnList as column>
			<#if column.isPrimaryKey>
				.add${column.type.getName()}Clause("${column.name}", RelationOp.EQUAL, ${table.variableName}.get${column.definationName}())
	        </#if>
        	
        </#list>	
		);
		return unifier.executeUpdateSql(updateSql);
    }
    </#if>

    public int update${table.definationName}(UpdateKeyValueClause updateKeyValueClause, ConditionClause conditionClause) {
        UpdateSql updateSql = new UpdateSql()
					.setTableName("${table.name}")
					.setUpdateKeyValueClause(updateKeyValueClause).setConditionClause(conditionClause);
		return unifier.executeUpdateSql(updateSql);
    }
    
    public int delete${table.name}(ConditionClause conditionClause) {
        DeleteSql deleteSql = new DeleteSql()
					.setTableName("${table.name}")
					.setConditionClause(conditionClause);
		return unifier.executeDeleteSql(deleteSql);
    }

    public PaginationArrayList<${table.definationName}> query${table.name}(ConditionClause conditionClause, ExtraClause extraClause, OrderByClause orderByClause, int pageSize, int pageNumber) {
		SelectSql selectSql = new SelectSql().setTableName("${table.name}")
					.setColumns("*").setConditionClause(conditionClause).setExtraClause(extraClause).setOrderByClause(orderByClause);
		RowSet rowSet = unifier.executeSelectSql(selectSql, pageSize, pageNumber);
		PaginationArrayList<${table.definationName}> pal = new PaginationArrayList<${table.definationName}>(rowSet.getPageSize(), rowSet.getPageNumber(), rowSet.getTotalRowCount());
		for (int i=0; i < rowSet.size(); i++) {
			Row row = rowSet.getRow(i);
			${table.definationName} ${table.variableName} = new ${table.definationName}();
			<#list table.columnList as column>
				${table.variableName}.set${column.definationName}(row.get${column.type.getName()}("${column.name}"));
        	</#list>
        	pal.add(${table.variableName});
		}
		return pal;
    }

    public List<${table.definationName}> query(ConditionClause conditionClause, ExtraClause extraClause, OrderByClause orderByClause) {
       SelectSql selectSql = new SelectSql().setTableName("${table.name}")
					.setColumns("*").setConditionClause(conditionClause).setExtraClause(extraClause).setOrderByClause(orderByClause);
		RowSet rowSet = unifier.executeSelectSql(selectSql);
		ArrayList<${table.definationName}> al = new ArrayList<${table.definationName}>();
		for (int i=0; i < rowSet.size(); i++) {
			Row row = rowSet.getRow(i);
			${table.definationName} ${table.variableName} = new ${table.definationName}();
			<#list table.columnList as column>
				${table.variableName}.set${column.definationName}(row.get${column.type.getName()}("${column.name}"));
        	</#list>
        	al.add(${table.variableName});
		}
		return al;
    }

}